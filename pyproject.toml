[build-system]
requires = ["flit"]
build-backend = "flit.buildapi"

[project]
name = "pvcast"
authors = [{ name = "Stefan de Lange", email = "example@unknown.com" }]
description = "Open-source python package to make short-term solar power forecasts."
readme = "README.md"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
requires-python = ">=3.8.1"
dynamic = ["version"]

dependencies = [
    "numpy==1.24.3",
    "pandas==2.0.2",
    "scipy==1.11.1",
    "pvlib==0.10.1",
    "pyyaml==6.0.1",
    "beautifulsoup4==4.12.2",
    "voluptuous==0.13.1",
    "waitress==2.1.2",
    "matplotlib==3.7.1",
    "fastapi==0.103.1",
    "uvicorn==0.23.2",
    "pint==0.22",
]

[project.optional-dependencies]
spark = ["pyspark>=3.0.0"]
test = [
    "bandit[toml]==1.7.5",
    "black==23.3.0",
    "check-manifest==0.49",
    "pre-commit==3.3.1",
    "ruff==0.1.5",
    "pytest-cov==4.0.0",
    "pytest-mock<3.10.1",
    "pytest-runner",
    "pytest==7.3.1",
    "pytest-remotedata==0.4.0",
    "pytest-github-actions-annotate-failures",
    "pytest-xdist==3.3.1",
    "shellcheck-py==0.9.0.2",
    "mock==5.0.2",
    "responses==0.23.1",
]

[project.urls]
Documentation = "https://github.com/microsoft/python-package-template/tree/main#readme"
Source = "https://github.com/microsoft/python-package-template"
Tracker = "https://github.com/microsoft/python-package-template/issues"

[tool.flit.module]
name = "python_package"

[tool.bandit]
exclude_dirs = ["build", "dist", "tests", "scripts"]
number = 4
recursive = true
targets = "pvcast"

[tool.black]
line-length = 120
fast = true

[tool.coverage.run]
branch = true
omit = ["pvcast/__main__.py"]

[tool.coverage.report]
fail_under = 100

[tool.pyright]
include = ["pvcast"]
exclude = ["**/node_modules", "**/__pycache__"]
venv = "env37"

reportMissingImports = true
reportMissingTypeStubs = false

pythonVersion = "3.7"
pythonPlatform = "Linux"

executionEnvironments = [{ root = "pvcast" }]

[tool.pytest.ini_options]
addopts = "--cov-report xml:coverage.xml --cov pvcast --cov-fail-under 0 --cov-append -m 'not integration' --cov-report term-missing"
pythonpath = ["src"]
log_cli = true
log_cli_level = "DEBUG"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
testpaths = "tests"
junit_family = "xunit2"
markers = [
    "integration: marks as integration test",
    "notebooks: marks as notebook test",
    "gpu: marks as gpu test",
    "spark: marks tests which need Spark",
    "slow: marks tests as slow",
    "unit: fast offline tests",
]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py, integration, spark, all

[testenv]
commands =
    pytest -m "not integration and not spark" {posargs}

[testenv:integration]
commands =
    pytest -m "integration" {posargs}

[testenv:spark]
extras = spark
setenv =
       PYSPARK_DRIVER_PYTHON = {envpython}
       PYSPARK_PYTHON = {envpython}
commands =
    pytest -m "spark" {posargs}

[testenv:all]
extras = all
setenv =
       PYSPARK_DRIVER_PYTHON = {envpython}
       PYSPARK_PYTHON = {envpython}
commands =
    pytest {posargs}
"""

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.8
target-version = "py38"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
